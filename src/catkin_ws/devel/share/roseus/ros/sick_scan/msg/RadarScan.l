;; Auto-generated. Do not edit!


(when (boundp 'sick_scan::RadarScan)
  (if (not (find-package "SICK_SCAN"))
    (make-package "SICK_SCAN"))
  (shadow 'RadarScan (find-package "SICK_SCAN")))
(unless (find-package "SICK_SCAN::RADARSCAN")
  (make-package "SICK_SCAN::RADARSCAN"))

(in-package "ROS")
;;//! \htmlinclude RadarScan.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass sick_scan::RadarScan
  :super ros::object
  :slots (_header _radarPreHeader _targets _objects ))

(defmethod sick_scan::RadarScan
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:radarPreHeader __radarPreHeader) (instance sick_scan::RadarPreHeader :init))
    ((:targets __targets) (instance sensor_msgs::PointCloud2 :init))
    ((:objects __objects) (let (r) (dotimes (i 0) (push (instance sick_scan::RadarObject :init) r)) r))
    )
   (send-super :init)
   (setq _header __header)
   (setq _radarPreHeader __radarPreHeader)
   (setq _targets __targets)
   (setq _objects __objects)
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:radarPreHeader
   (&rest __radarPreHeader)
   (if (keywordp (car __radarPreHeader))
       (send* _radarPreHeader __radarPreHeader)
     (progn
       (if __radarPreHeader (setq _radarPreHeader (car __radarPreHeader)))
       _radarPreHeader)))
  (:targets
   (&rest __targets)
   (if (keywordp (car __targets))
       (send* _targets __targets)
     (progn
       (if __targets (setq _targets (car __targets)))
       _targets)))
  (:objects
   (&rest __objects)
   (if (keywordp (car __objects))
       (send* _objects __objects)
     (progn
       (if __objects (setq _objects (car __objects)))
       _objects)))
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; sick_scan/RadarPreHeader _radarPreHeader
    (send _radarPreHeader :serialization-length)
    ;; sensor_msgs/PointCloud2 _targets
    (send _targets :serialization-length)
    ;; sick_scan/RadarObject[] _objects
    (apply #'+ (send-all _objects :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; sick_scan/RadarPreHeader _radarPreHeader
       (send _radarPreHeader :serialize s)
     ;; sensor_msgs/PointCloud2 _targets
       (send _targets :serialize s)
     ;; sick_scan/RadarObject[] _objects
     (write-long (length _objects) s)
     (dolist (elem _objects)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; sick_scan/RadarPreHeader _radarPreHeader
     (send _radarPreHeader :deserialize buf ptr-) (incf ptr- (send _radarPreHeader :serialization-length))
   ;; sensor_msgs/PointCloud2 _targets
     (send _targets :deserialize buf ptr-) (incf ptr- (send _targets :serialization-length))
   ;; sick_scan/RadarObject[] _objects
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _objects (let (r) (dotimes (i n) (push (instance sick_scan::RadarObject :init) r)) r))
     (dolist (elem- _objects)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get sick_scan::RadarScan :md5sum-) "db9483dce93673bbf6148baa3d967315")
(setf (get sick_scan::RadarScan :datatype-) "sick_scan/RadarScan")
(setf (get sick_scan::RadarScan :definition-)
      "#
# The message is divided into three parts:
# 1. Header: containing information about general radar parameters
# 2. RawTargets: List of targets containing maximum values in the range-doppler-matrix - used for tracking
# 3. Objects: List of objects generated by the internal tracking algorithm - based on raw targets
Header header
RadarPreHeader radarPreHeader
sensor_msgs/PointCloud2 targets
sick_scan/RadarObject[] objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sick_scan/RadarPreHeader
# Version information for this whole structure (MeasurementData)
uint16 uiVersionNo
sick_scan/RadarPreHeaderDeviceBlock radarPreHeaderDeviceBlock
sick_scan/RadarPreHeaderStatusBlock radarPreHeaderStatusBlock
sick_scan/RadarPreHeaderMeasurementParam1Block radarPreHeaderMeasurementParam1Block
sick_scan/RadarPreHeaderEncoderBlock[] radarPreHeaderArrayEncoderBlock


================================================================================
MSG: sick_scan/RadarPreHeaderDeviceBlock
#
#
#
#

# Logical number of the device\"
uint32 uiIdent
# Serial number of the device
uint32 udiSerialNo
# State of the device
bool bDeviceError
# Contamination Warning
bool bContaminationWarning
# Contamination Error
bool bContaminationError
================================================================================
MSG: sick_scan/RadarPreHeaderStatusBlock
#
#
#
uint32 uiTelegramCount # telegram number
uint32 uiCycleCount # \"scan number\"
uint32 udiSystemCountScan # system time since power on of scan gen. [us]
uint32 udiSystemCountTransmit # system time since power on of scan transmission [us]
uint16 uiInputs # state of digital inputs
uint16 uiOutputs # state of digital outputs

================================================================================
MSG: sick_scan/RadarPreHeaderMeasurementParam1Block
uint32 uiCycleDuration # Time in microseconds to detect this items
uint32 uiNoiseLevel # [1/100dB]

================================================================================
MSG: sick_scan/RadarPreHeaderEncoderBlock
# Array with connected encoder sensors
uint32 udiEncoderPos  # encoder position [inc]
int16 iEncoderSpeed   # encoder speed [inc/mm]
================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the \"fields\" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: sick_scan/RadarObject
int32 id

time tracking_time                          # since when the object is tracked
time last_seen

geometry_msgs/TwistWithCovariance velocity

geometry_msgs/Pose bounding_box_center
geometry_msgs/Vector3 bounding_box_size

geometry_msgs/PoseWithCovariance object_box_center
geometry_msgs/Vector3 object_box_size

geometry_msgs/Point[] contour_points

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

")



(provide :sick_scan/RadarScan "db9483dce93673bbf6148baa3d967315")


