# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sick_scan/RadarPreHeader.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sick_scan.msg

class RadarPreHeader(genpy.Message):
  _md5sum = "2b96d942f26bd5b00da7e631bf199685"
  _type = "sick_scan/RadarPreHeader"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Version information for this whole structure (MeasurementData)
uint16 uiVersionNo
sick_scan/RadarPreHeaderDeviceBlock radarPreHeaderDeviceBlock
sick_scan/RadarPreHeaderStatusBlock radarPreHeaderStatusBlock
sick_scan/RadarPreHeaderMeasurementParam1Block radarPreHeaderMeasurementParam1Block
sick_scan/RadarPreHeaderEncoderBlock[] radarPreHeaderArrayEncoderBlock


================================================================================
MSG: sick_scan/RadarPreHeaderDeviceBlock
#
#
#
#

# Logical number of the device"
uint32 uiIdent
# Serial number of the device
uint32 udiSerialNo
# State of the device
bool bDeviceError
# Contamination Warning
bool bContaminationWarning
# Contamination Error
bool bContaminationError
================================================================================
MSG: sick_scan/RadarPreHeaderStatusBlock
#
#
#
uint32 uiTelegramCount # telegram number
uint32 uiCycleCount # "scan number"
uint32 udiSystemCountScan # system time since power on of scan gen. [us]
uint32 udiSystemCountTransmit # system time since power on of scan transmission [us]
uint16 uiInputs # state of digital inputs
uint16 uiOutputs # state of digital outputs

================================================================================
MSG: sick_scan/RadarPreHeaderMeasurementParam1Block
uint32 uiCycleDuration # Time in microseconds to detect this items
uint32 uiNoiseLevel # [1/100dB]

================================================================================
MSG: sick_scan/RadarPreHeaderEncoderBlock
# Array with connected encoder sensors
uint32 udiEncoderPos  # encoder position [inc]
int16 iEncoderSpeed   # encoder speed [inc/mm]"""
  __slots__ = ['uiVersionNo','radarPreHeaderDeviceBlock','radarPreHeaderStatusBlock','radarPreHeaderMeasurementParam1Block','radarPreHeaderArrayEncoderBlock']
  _slot_types = ['uint16','sick_scan/RadarPreHeaderDeviceBlock','sick_scan/RadarPreHeaderStatusBlock','sick_scan/RadarPreHeaderMeasurementParam1Block','sick_scan/RadarPreHeaderEncoderBlock[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       uiVersionNo,radarPreHeaderDeviceBlock,radarPreHeaderStatusBlock,radarPreHeaderMeasurementParam1Block,radarPreHeaderArrayEncoderBlock

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarPreHeader, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.uiVersionNo is None:
        self.uiVersionNo = 0
      if self.radarPreHeaderDeviceBlock is None:
        self.radarPreHeaderDeviceBlock = sick_scan.msg.RadarPreHeaderDeviceBlock()
      if self.radarPreHeaderStatusBlock is None:
        self.radarPreHeaderStatusBlock = sick_scan.msg.RadarPreHeaderStatusBlock()
      if self.radarPreHeaderMeasurementParam1Block is None:
        self.radarPreHeaderMeasurementParam1Block = sick_scan.msg.RadarPreHeaderMeasurementParam1Block()
      if self.radarPreHeaderArrayEncoderBlock is None:
        self.radarPreHeaderArrayEncoderBlock = []
    else:
      self.uiVersionNo = 0
      self.radarPreHeaderDeviceBlock = sick_scan.msg.RadarPreHeaderDeviceBlock()
      self.radarPreHeaderStatusBlock = sick_scan.msg.RadarPreHeaderStatusBlock()
      self.radarPreHeaderMeasurementParam1Block = sick_scan.msg.RadarPreHeaderMeasurementParam1Block()
      self.radarPreHeaderArrayEncoderBlock = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2I3B4I2H2I().pack(_x.uiVersionNo, _x.radarPreHeaderDeviceBlock.uiIdent, _x.radarPreHeaderDeviceBlock.udiSerialNo, _x.radarPreHeaderDeviceBlock.bDeviceError, _x.radarPreHeaderDeviceBlock.bContaminationWarning, _x.radarPreHeaderDeviceBlock.bContaminationError, _x.radarPreHeaderStatusBlock.uiTelegramCount, _x.radarPreHeaderStatusBlock.uiCycleCount, _x.radarPreHeaderStatusBlock.udiSystemCountScan, _x.radarPreHeaderStatusBlock.udiSystemCountTransmit, _x.radarPreHeaderStatusBlock.uiInputs, _x.radarPreHeaderStatusBlock.uiOutputs, _x.radarPreHeaderMeasurementParam1Block.uiCycleDuration, _x.radarPreHeaderMeasurementParam1Block.uiNoiseLevel))
      length = len(self.radarPreHeaderArrayEncoderBlock)
      buff.write(_struct_I.pack(length))
      for val1 in self.radarPreHeaderArrayEncoderBlock:
        _x = val1
        buff.write(_get_struct_Ih().pack(_x.udiEncoderPos, _x.iEncoderSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.radarPreHeaderDeviceBlock is None:
        self.radarPreHeaderDeviceBlock = sick_scan.msg.RadarPreHeaderDeviceBlock()
      if self.radarPreHeaderStatusBlock is None:
        self.radarPreHeaderStatusBlock = sick_scan.msg.RadarPreHeaderStatusBlock()
      if self.radarPreHeaderMeasurementParam1Block is None:
        self.radarPreHeaderMeasurementParam1Block = sick_scan.msg.RadarPreHeaderMeasurementParam1Block()
      if self.radarPreHeaderArrayEncoderBlock is None:
        self.radarPreHeaderArrayEncoderBlock = None
      end = 0
      _x = self
      start = end
      end += 41
      (_x.uiVersionNo, _x.radarPreHeaderDeviceBlock.uiIdent, _x.radarPreHeaderDeviceBlock.udiSerialNo, _x.radarPreHeaderDeviceBlock.bDeviceError, _x.radarPreHeaderDeviceBlock.bContaminationWarning, _x.radarPreHeaderDeviceBlock.bContaminationError, _x.radarPreHeaderStatusBlock.uiTelegramCount, _x.radarPreHeaderStatusBlock.uiCycleCount, _x.radarPreHeaderStatusBlock.udiSystemCountScan, _x.radarPreHeaderStatusBlock.udiSystemCountTransmit, _x.radarPreHeaderStatusBlock.uiInputs, _x.radarPreHeaderStatusBlock.uiOutputs, _x.radarPreHeaderMeasurementParam1Block.uiCycleDuration, _x.radarPreHeaderMeasurementParam1Block.uiNoiseLevel,) = _get_struct_H2I3B4I2H2I().unpack(str[start:end])
      self.radarPreHeaderDeviceBlock.bDeviceError = bool(self.radarPreHeaderDeviceBlock.bDeviceError)
      self.radarPreHeaderDeviceBlock.bContaminationWarning = bool(self.radarPreHeaderDeviceBlock.bContaminationWarning)
      self.radarPreHeaderDeviceBlock.bContaminationError = bool(self.radarPreHeaderDeviceBlock.bContaminationError)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radarPreHeaderArrayEncoderBlock = []
      for i in range(0, length):
        val1 = sick_scan.msg.RadarPreHeaderEncoderBlock()
        _x = val1
        start = end
        end += 6
        (_x.udiEncoderPos, _x.iEncoderSpeed,) = _get_struct_Ih().unpack(str[start:end])
        self.radarPreHeaderArrayEncoderBlock.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2I3B4I2H2I().pack(_x.uiVersionNo, _x.radarPreHeaderDeviceBlock.uiIdent, _x.radarPreHeaderDeviceBlock.udiSerialNo, _x.radarPreHeaderDeviceBlock.bDeviceError, _x.radarPreHeaderDeviceBlock.bContaminationWarning, _x.radarPreHeaderDeviceBlock.bContaminationError, _x.radarPreHeaderStatusBlock.uiTelegramCount, _x.radarPreHeaderStatusBlock.uiCycleCount, _x.radarPreHeaderStatusBlock.udiSystemCountScan, _x.radarPreHeaderStatusBlock.udiSystemCountTransmit, _x.radarPreHeaderStatusBlock.uiInputs, _x.radarPreHeaderStatusBlock.uiOutputs, _x.radarPreHeaderMeasurementParam1Block.uiCycleDuration, _x.radarPreHeaderMeasurementParam1Block.uiNoiseLevel))
      length = len(self.radarPreHeaderArrayEncoderBlock)
      buff.write(_struct_I.pack(length))
      for val1 in self.radarPreHeaderArrayEncoderBlock:
        _x = val1
        buff.write(_get_struct_Ih().pack(_x.udiEncoderPos, _x.iEncoderSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.radarPreHeaderDeviceBlock is None:
        self.radarPreHeaderDeviceBlock = sick_scan.msg.RadarPreHeaderDeviceBlock()
      if self.radarPreHeaderStatusBlock is None:
        self.radarPreHeaderStatusBlock = sick_scan.msg.RadarPreHeaderStatusBlock()
      if self.radarPreHeaderMeasurementParam1Block is None:
        self.radarPreHeaderMeasurementParam1Block = sick_scan.msg.RadarPreHeaderMeasurementParam1Block()
      if self.radarPreHeaderArrayEncoderBlock is None:
        self.radarPreHeaderArrayEncoderBlock = None
      end = 0
      _x = self
      start = end
      end += 41
      (_x.uiVersionNo, _x.radarPreHeaderDeviceBlock.uiIdent, _x.radarPreHeaderDeviceBlock.udiSerialNo, _x.radarPreHeaderDeviceBlock.bDeviceError, _x.radarPreHeaderDeviceBlock.bContaminationWarning, _x.radarPreHeaderDeviceBlock.bContaminationError, _x.radarPreHeaderStatusBlock.uiTelegramCount, _x.radarPreHeaderStatusBlock.uiCycleCount, _x.radarPreHeaderStatusBlock.udiSystemCountScan, _x.radarPreHeaderStatusBlock.udiSystemCountTransmit, _x.radarPreHeaderStatusBlock.uiInputs, _x.radarPreHeaderStatusBlock.uiOutputs, _x.radarPreHeaderMeasurementParam1Block.uiCycleDuration, _x.radarPreHeaderMeasurementParam1Block.uiNoiseLevel,) = _get_struct_H2I3B4I2H2I().unpack(str[start:end])
      self.radarPreHeaderDeviceBlock.bDeviceError = bool(self.radarPreHeaderDeviceBlock.bDeviceError)
      self.radarPreHeaderDeviceBlock.bContaminationWarning = bool(self.radarPreHeaderDeviceBlock.bContaminationWarning)
      self.radarPreHeaderDeviceBlock.bContaminationError = bool(self.radarPreHeaderDeviceBlock.bContaminationError)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radarPreHeaderArrayEncoderBlock = []
      for i in range(0, length):
        val1 = sick_scan.msg.RadarPreHeaderEncoderBlock()
        _x = val1
        start = end
        end += 6
        (_x.udiEncoderPos, _x.iEncoderSpeed,) = _get_struct_Ih().unpack(str[start:end])
        self.radarPreHeaderArrayEncoderBlock.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2I3B4I2H2I = None
def _get_struct_H2I3B4I2H2I():
    global _struct_H2I3B4I2H2I
    if _struct_H2I3B4I2H2I is None:
        _struct_H2I3B4I2H2I = struct.Struct("<H2I3B4I2H2I")
    return _struct_H2I3B4I2H2I
_struct_Ih = None
def _get_struct_Ih():
    global _struct_Ih
    if _struct_Ih is None:
        _struct_Ih = struct.Struct("<Ih")
    return _struct_Ih
