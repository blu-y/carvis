# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vectornav/Ins.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Ins(genpy.Message):
  _md5sum = "f15f75d40252c44bbfc42358abc151e2"
  _type = "vectornav/Ins"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float64 time	# GPS time of week in seconds
uint16 week		# GPS week (week)
uint64 utcTime	# The current UTC time. The year is given as a signed byte year offset from the year 2000. E.g. 2013 as 13.
                # Fields:       year    month    day    hour    min    sec    ms
                # Byte offset:  0       1        2      3       4      5      6|7

# INS Status
# Name		Bit Offset	Format	Description
# Mode		0			2 bits	Indicates the current mode of the INS filter.
#								0 = Not tracking. Insufficient dynamic motion to estimate attitude.
#								1 = Sufficient dynamic motion, but solution not within performance specs.
#								2 = INS is tracking and operating within specifications.
# GpsFix	2			1 bit	Indicates whether the GPS has a proper fix
# Error 	3			4 bits	Sensor measurement error code
#								0 = No errors detected.
# 								Name			Bit Offset	Format	Description
#								Time Error		0			1 bit	High if INS filter loop exceeds 5 ms.
#								IMU Error		1			1 bit	High if IMU communication error is detected.
#								Mag/Pres Error	2			1 bit	High if Magnetometer or Pressure sensor error is detected.
#								GPS Error		3			1 bit	High if GPS communication error is detected.
#Reserved	7			9 bits	Reserved for future use.
uint16 insStatus

float32 yaw		# Yaw angle relative to true north. (degree)
float32 pitch	# Yaw angle relative to true north (degree)
float32 roll	# Pitch angle relative to horizon (degree)

float64 latitude	# INS solution position in geodetic latitude (degree)
float64 longitude	# INS solution position in geodetic longitude (degree)
float64 altitude	# Height above ellipsoid. (WGS84) (meter)

float32 nedVelX		# INS solution velocity in NED frame. (North) (m/s)
float32 nedVelY		# INS solution velocity in NED frame. (East) (m/s)
float32 nedVelZ		# INS solution velocity in NED frame. (Down) (m/s)

float32[3] attUncertainty	# Uncertainty in attitude estimate (yaw, pitch and roll in degrees)
float32 posUncertainty	# Uncertainty in position estimate (m)
float32 velUncertainty	# Uncertainty in velocity estimate (m/s)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','time','week','utcTime','insStatus','yaw','pitch','roll','latitude','longitude','altitude','nedVelX','nedVelY','nedVelZ','attUncertainty','posUncertainty','velUncertainty']
  _slot_types = ['std_msgs/Header','float64','uint16','uint64','uint16','float32','float32','float32','float64','float64','float64','float32','float32','float32','float32[3]','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time,week,utcTime,insStatus,yaw,pitch,roll,latitude,longitude,altitude,nedVelX,nedVelY,nedVelZ,attUncertainty,posUncertainty,velUncertainty

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ins, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = 0.
      if self.week is None:
        self.week = 0
      if self.utcTime is None:
        self.utcTime = 0
      if self.insStatus is None:
        self.insStatus = 0
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.nedVelX is None:
        self.nedVelX = 0.
      if self.nedVelY is None:
        self.nedVelY = 0.
      if self.nedVelZ is None:
        self.nedVelZ = 0.
      if self.attUncertainty is None:
        self.attUncertainty = [0.] * 3
      if self.posUncertainty is None:
        self.posUncertainty = 0.
      if self.velUncertainty is None:
        self.velUncertainty = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.time = 0.
      self.week = 0
      self.utcTime = 0
      self.insStatus = 0
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.nedVelX = 0.
      self.nedVelY = 0.
      self.nedVelZ = 0.
      self.attUncertainty = [0.] * 3
      self.posUncertainty = 0.
      self.velUncertainty = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dHQH3f3d3f().pack(_x.time, _x.week, _x.utcTime, _x.insStatus, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.nedVelX, _x.nedVelY, _x.nedVelZ))
      buff.write(_get_struct_3f().pack(*self.attUncertainty))
      _x = self
      buff.write(_get_struct_2f().pack(_x.posUncertainty, _x.velUncertainty))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.time, _x.week, _x.utcTime, _x.insStatus, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.nedVelX, _x.nedVelY, _x.nedVelZ,) = _get_struct_dHQH3f3d3f().unpack(str[start:end])
      start = end
      end += 12
      self.attUncertainty = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.posUncertainty, _x.velUncertainty,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dHQH3f3d3f().pack(_x.time, _x.week, _x.utcTime, _x.insStatus, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.nedVelX, _x.nedVelY, _x.nedVelZ))
      buff.write(self.attUncertainty.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.posUncertainty, _x.velUncertainty))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.time, _x.week, _x.utcTime, _x.insStatus, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.nedVelX, _x.nedVelY, _x.nedVelZ,) = _get_struct_dHQH3f3d3f().unpack(str[start:end])
      start = end
      end += 12
      self.attUncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 8
      (_x.posUncertainty, _x.velUncertainty,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_dHQH3f3d3f = None
def _get_struct_dHQH3f3d3f():
    global _struct_dHQH3f3d3f
    if _struct_dHQH3f3d3f is None:
        _struct_dHQH3f3d3f = struct.Struct("<dHQH3f3d3f")
    return _struct_dHQH3f3d3f
