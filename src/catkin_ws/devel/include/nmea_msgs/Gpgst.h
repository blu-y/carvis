// Generated by gencpp from file nmea_msgs/Gpgst.msg
// DO NOT EDIT!


#ifndef NMEA_MSGS_MESSAGE_GPGST_H
#define NMEA_MSGS_MESSAGE_GPGST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace nmea_msgs
{
template <class ContainerAllocator>
struct Gpgst_
{
  typedef Gpgst_<ContainerAllocator> Type;

  Gpgst_()
    : header()
    , message_id()
    , utc_seconds(0.0)
    , rms(0.0)
    , semi_major_dev(0.0)
    , semi_minor_dev(0.0)
    , orientation(0.0)
    , lat_dev(0.0)
    , lon_dev(0.0)
    , alt_dev(0.0)  {
    }
  Gpgst_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , message_id(_alloc)
    , utc_seconds(0.0)
    , rms(0.0)
    , semi_major_dev(0.0)
    , semi_minor_dev(0.0)
    , orientation(0.0)
    , lat_dev(0.0)
    , lon_dev(0.0)
    , alt_dev(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_id_type;
  _message_id_type message_id;

   typedef double _utc_seconds_type;
  _utc_seconds_type utc_seconds;

   typedef float _rms_type;
  _rms_type rms;

   typedef float _semi_major_dev_type;
  _semi_major_dev_type semi_major_dev;

   typedef float _semi_minor_dev_type;
  _semi_minor_dev_type semi_minor_dev;

   typedef float _orientation_type;
  _orientation_type orientation;

   typedef float _lat_dev_type;
  _lat_dev_type lat_dev;

   typedef float _lon_dev_type;
  _lon_dev_type lon_dev;

   typedef float _alt_dev_type;
  _alt_dev_type alt_dev;





  typedef boost::shared_ptr< ::nmea_msgs::Gpgst_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nmea_msgs::Gpgst_<ContainerAllocator> const> ConstPtr;

}; // struct Gpgst_

typedef ::nmea_msgs::Gpgst_<std::allocator<void> > Gpgst;

typedef boost::shared_ptr< ::nmea_msgs::Gpgst > GpgstPtr;
typedef boost::shared_ptr< ::nmea_msgs::Gpgst const> GpgstConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nmea_msgs::Gpgst_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nmea_msgs::Gpgst_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nmea_msgs::Gpgst_<ContainerAllocator1> & lhs, const ::nmea_msgs::Gpgst_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.message_id == rhs.message_id &&
    lhs.utc_seconds == rhs.utc_seconds &&
    lhs.rms == rhs.rms &&
    lhs.semi_major_dev == rhs.semi_major_dev &&
    lhs.semi_minor_dev == rhs.semi_minor_dev &&
    lhs.orientation == rhs.orientation &&
    lhs.lat_dev == rhs.lat_dev &&
    lhs.lon_dev == rhs.lon_dev &&
    lhs.alt_dev == rhs.alt_dev;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nmea_msgs::Gpgst_<ContainerAllocator1> & lhs, const ::nmea_msgs::Gpgst_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nmea_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nmea_msgs::Gpgst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nmea_msgs::Gpgst_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nmea_msgs::Gpgst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nmea_msgs::Gpgst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nmea_msgs::Gpgst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nmea_msgs::Gpgst_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nmea_msgs::Gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4b77f6f4c211629ab0307177f71dcee";
  }

  static const char* value(const ::nmea_msgs::Gpgst_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4b77f6f4c211629ULL;
  static const uint64_t static_value2 = 0xab0307177f71dceeULL;
};

template<class ContainerAllocator>
struct DataType< ::nmea_msgs::Gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nmea_msgs/Gpgst";
  }

  static const char* value(const ::nmea_msgs::Gpgst_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nmea_msgs::Gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message from GPGST NMEA String\n"
"Header header\n"
"\n"
"string message_id\n"
"\n"
"# UTC seconds from midnight\n"
"float64 utc_seconds\n"
"\n"
"# Root-Mean-Squared value of standard deviation of range inputs\n"
"float32 rms\n"
"\n"
"# Standard Deviations of semi-major and minor axes of error ellipse\n"
"float32 semi_major_dev\n"
"float32 semi_minor_dev\n"
"\n"
"# Orientation of the semi-major axis of error ellipse with respect to true north\n"
"float32 orientation\n"
"\n"
"# Standard Deviations of latitude, longitude, and altitude measurements\n"
"float32 lat_dev\n"
"float32 lon_dev\n"
"float32 alt_dev\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::nmea_msgs::Gpgst_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nmea_msgs::Gpgst_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.message_id);
      stream.next(m.utc_seconds);
      stream.next(m.rms);
      stream.next(m.semi_major_dev);
      stream.next(m.semi_minor_dev);
      stream.next(m.orientation);
      stream.next(m.lat_dev);
      stream.next(m.lon_dev);
      stream.next(m.alt_dev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gpgst_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nmea_msgs::Gpgst_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nmea_msgs::Gpgst_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "message_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message_id);
    s << indent << "utc_seconds: ";
    Printer<double>::stream(s, indent + "  ", v.utc_seconds);
    s << indent << "rms: ";
    Printer<float>::stream(s, indent + "  ", v.rms);
    s << indent << "semi_major_dev: ";
    Printer<float>::stream(s, indent + "  ", v.semi_major_dev);
    s << indent << "semi_minor_dev: ";
    Printer<float>::stream(s, indent + "  ", v.semi_minor_dev);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
    s << indent << "lat_dev: ";
    Printer<float>::stream(s, indent + "  ", v.lat_dev);
    s << indent << "lon_dev: ";
    Printer<float>::stream(s, indent + "  ", v.lon_dev);
    s << indent << "alt_dev: ";
    Printer<float>::stream(s, indent + "  ", v.alt_dev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NMEA_MSGS_MESSAGE_GPGST_H
