// Generated by gencpp from file erp42mini_driver/erpminiStatusMsg.msg
// DO NOT EDIT!


#ifndef ERP42MINI_DRIVER_MESSAGE_ERPMINISTATUSMSG_H
#define ERP42MINI_DRIVER_MESSAGE_ERPMINISTATUSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace erp42mini_driver
{
template <class ContainerAllocator>
struct erpminiStatusMsg_
{
  typedef erpminiStatusMsg_<ContainerAllocator> Type;

  erpminiStatusMsg_()
    : header()
    , dir(false)
    , speed(0)
    , steer(0)
    , brake(0)
    , encoder(0)
    , garmin_left_range(0.0)
    , garmin_right_range(0.0)  {
    }
  erpminiStatusMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dir(false)
    , speed(0)
    , steer(0)
    , brake(0)
    , encoder(0)
    , garmin_left_range(0.0)
    , garmin_right_range(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _dir_type;
  _dir_type dir;

   typedef int8_t _speed_type;
  _speed_type speed;

   typedef int16_t _steer_type;
  _steer_type steer;

   typedef int16_t _brake_type;
  _brake_type brake;

   typedef int32_t _encoder_type;
  _encoder_type encoder;

   typedef float _garmin_left_range_type;
  _garmin_left_range_type garmin_left_range;

   typedef float _garmin_right_range_type;
  _garmin_right_range_type garmin_right_range;





  typedef boost::shared_ptr< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> const> ConstPtr;

}; // struct erpminiStatusMsg_

typedef ::erp42mini_driver::erpminiStatusMsg_<std::allocator<void> > erpminiStatusMsg;

typedef boost::shared_ptr< ::erp42mini_driver::erpminiStatusMsg > erpminiStatusMsgPtr;
typedef boost::shared_ptr< ::erp42mini_driver::erpminiStatusMsg const> erpminiStatusMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator1> & lhs, const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.dir == rhs.dir &&
    lhs.speed == rhs.speed &&
    lhs.steer == rhs.steer &&
    lhs.brake == rhs.brake &&
    lhs.encoder == rhs.encoder &&
    lhs.garmin_left_range == rhs.garmin_left_range &&
    lhs.garmin_right_range == rhs.garmin_right_range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator1> & lhs, const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace erp42mini_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70b456b10b901dac2ec24fcef9df6573";
  }

  static const char* value(const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70b456b10b901dacULL;
  static const uint64_t static_value2 = 0x2ec24fcef9df6573ULL;
};

template<class ContainerAllocator>
struct DataType< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erp42mini_driver/erpminiStatusMsg";
  }

  static const char* value(const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool dir\n"
"int8 speed\n"
"int16 steer\n"
"int16 brake\n"
"int32 encoder\n"
"float32 garmin_left_range\n"
"float32 garmin_right_range\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dir);
      stream.next(m.speed);
      stream.next(m.steer);
      stream.next(m.brake);
      stream.next(m.encoder);
      stream.next(m.garmin_left_range);
      stream.next(m.garmin_right_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct erpminiStatusMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erp42mini_driver::erpminiStatusMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir);
    s << indent << "speed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed);
    s << indent << "steer: ";
    Printer<int16_t>::stream(s, indent + "  ", v.steer);
    s << indent << "brake: ";
    Printer<int16_t>::stream(s, indent + "  ", v.brake);
    s << indent << "encoder: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder);
    s << indent << "garmin_left_range: ";
    Printer<float>::stream(s, indent + "  ", v.garmin_left_range);
    s << indent << "garmin_right_range: ";
    Printer<float>::stream(s, indent + "  ", v.garmin_right_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERP42MINI_DRIVER_MESSAGE_ERPMINISTATUSMSG_H
